# This applications logging properties
# It is standard java logging, so google for "java logging".
# (please note the blank line at the end of the file.)
#
# Logging is twofold: first there are messages that will be recorded by
# loggers. Each logger discards messages below some defined level.
# All recorded messages are then passed to the handlers. Those handlers
# are also able to discard log messages based on level.
# So, to successfully print a message, its level must both: be above
# the loggers trashhold and also be above the handlers trashhold.



# Handler(s) to use.
# Several are possible, if more than one, separate using commata (,).
# - ConsoleHandler writes to STDERR
# - FileHandler writes to file
# - ...
handlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler

# default log level; controls which log messages are discarded at logging time
# for all loggers that have no level defined.
.level = INFO

# ConsoleHandler config
# The levels here define, which levels are discarded by the specific logging handler at
# writing time. The logger can only handle messages that reach him (see individual levels
# of the loggers as well as the global .level property)
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

java.util.logging.FileHandler.level = INFO
java.util.logging.FileHandler.pattern = sgs%u.log
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
# Specific config for some loggers.
# The level will be used by all possible loggers below the one specified.
# Loggers without level set will use the global .level level.
com.firegnom.level = INFO
